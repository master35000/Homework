import keyboard

def game_board(matrix):   # форматирование игрового поля
    for row in matrix:
        print(' '.join(map(str, row)))

def input_hod(moves,XO):  # Ход пользователя
    while True:           # Бесконечный цикл пока пользователь не введет корректные координаты
        simvol= 'X' if XO % 2 == 1 else '0'   # Определение чей ход, Х или 0
        hod = input(f'Ход "{simvol}" Введите два числа от 0 до 2 (ряд, столбец, например 02) указывающие координаты куда вы хотите сходить:')      # ввод координат от пользователя
        if hod.isdigit() and len(hod) == 2 and 0 <= int(hod[0]) <= 2 and 0 <= int(hod[1]) <= 2 and hod not in moves:              # проверка соответствия введенного пользователем требованиям
            row = int(hod[0])               # выделение ряда для добавления в матрицу
            column = int(hod[1])            # выделение столбца для добавления в матрицу
            print(f'Ваши координаты: {row} ряд, {column} столбец')   # сообщение о введенных координатах
            moves.add(hod)                  # добавление в множество информации о сделанном ходе
            break                           # прерывание цикла в случае успешного ввода
        else:
            print ('Такой ход уже был! Повторите ввод.') if hod in moves else print('Некорректный ввод, повторите')      # уведомление пользователя о неверно введенных координатах и необходимости повторно ввести координаты
    return row, column, moves              # функция возвращает ряд, строку для внесения информации в матрицу и дополненное множество уже сделанных ходов

def winner (matrix, XO): # проверка победителя/ничья
    simvol = 'X' if XO % 2 == 1 else '0'                # Определение чей ход, Х или 0
    win3 = ''                                                # объявляем переменную для проверки победы по главной диагонали
    win4 = ''                                               # объявляем переменную для проверки победы по побочной диагонали
    for i in range(1, 4, 1):                                # цикл для перебора рядов матрицы
        win = ''                                           # объявляем переменную для проверки победы по горизонтали
        win2 = ''                                            # объявляем переменную для проверки победы по вертикали
        win3 += matrix[i][i]                               # контаминация переменной
        win4 += matrix[i][3 - i + 1]                        # контаминация переменной
        if win3 == simvol*3 or win4 == simvol*3:           # проверка условия на победу по главной и побочной диагоналям
            print(f'Победили "{simvol}" !')                #  сообщение о победе пользователя Х или 0
            XO=10                                          # счетчику ходов устанавливается значение превышающее максимально возможное для данного поля
            break                                           # прерывание цикла
        for j in range(1, 4, 1):                             # цикл для перебора столбцов матрицы
            win += matrix[i][j]                             # контаминация переменной
            win2 += matrix[j][i]                            # контаминация переменной
        if win == simvol*3 or win2 == simvol*3:             # проверка условия на победу по вертикали или горизонтали
            print(f'Победили "{simvol}" !')                 #  сообщение о победе пользователя Х или 0
            XO=10                                           # счетчику ходов устанавливается значение превышающее максимально возможное для данного поля
            break                                           # прерывание цикла
    if XO == 9: print ('Игровое поле полностью заполнено! Ничья!!!')   # проверка на ничью
    return XO                                               # функция возвращает счетчик ходов

print("ДОБРО ПОЖАЛОВАТЬ В ИГРУ КРЕСТИКИ НОЛИКИ!!! \n \n"  # Правила игры
      "ПРАВИЛА ИГРЫ.\n"
      "Игроки по очереди ставят на свободные клетки поля 3×3 знаки (один всегда крестики, другой всегда нолики). \n"
      "Первый, выстроивший в ряд 3 своих фигуры по вертикали, горизонтали или большой диагонали, выигрывает. \n"
      "Если игроки заполнили все 9 ячеек и оказалось, что ни в одной вертикали, горизонтали или большой диагонали нет трёх одинаковых знаков, партия считается закончившейся в ничью. \n"
      "Первый ход делает игрок, ставящий крестики. \n \n")
print("Нажмите Enter для продолжения:")

while True: # продолжение кода после нажатия пользователем Enter
    if keyboard.is_pressed('ENTER'):
        break

moves=set()             # объявление множества для проверки повторяющихся ходов
matrix = [              # матрица стартового игрового поля
    [' ', 0, 1, 2],
    [0, '-', '-','-'],
    [1, '-', '-','-'],
    [2, '-', '-','-'],
]
game_board(matrix) # вывод матрицы в консоль

#ход игроков с 1 по 4 ( x-нечетный ход, 0-четный ход)
XO=1                                # счетчик ходов
for XO in range (1,5,1):            # цикл для первых пяти ходов, в котором не требуется проверка победителя
    row, column, moves = input_hod(moves, XO)    # вызываем функцию  input_hod для получения данных о координатах по которым пользователь хочет сделать ход и данные об уже сделанных ходах за всю игру
    matrix[row + 1][column + 1] = 'X' if XO % 2 == 1 else '0'   # добавляем символ в матрицу, в зависимости от порядкового номера хода вносятся разные символы
    game_board(matrix)           # выводим матрицу на консоль в требуемом виде
    XO+=1                 # увеличиваем счетчик ходов на 1

#ход игроков с 5 по 9 ( x-нечетный ход, 0-четный ход)

for XO in range (5,10,1):  # цикл для первых пяти ходов, в котором требуется проверка победителя
    row, column, moves = input_hod(moves, XO)                            # вызываем функцию  input_hod для получения данных о координатах по которым пользователь хочет сделать ход и данные об уже сделанных ходах за всю игру
    matrix[row + 1][column + 1] = 'X' if XO % 2 == 1 else '0'                     # добавляем символ в матрицу, в зависимости от порядкового номера хода вносятся разные символы
    game_board(matrix)                                # выводим матрицу на консоль в требуемом виде
    XO = winner(matrix, XO)                           # результат работы функции winner присваивается переменной XO
    if XO > 9: break                                  # прерывание цикла и окончание игры в случае полностью заполненного игрового поля
    XO += 1                                           # увеличение счетчика ходов на 1








